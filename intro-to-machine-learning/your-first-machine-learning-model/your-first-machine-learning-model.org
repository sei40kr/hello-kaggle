#+BEGIN_SRC jupyter-python :session python
import pandas as pd

melbourne_file_path = '../../data/input/melb_data.csv'
melbourne_data = pd.read_csv(melbourne_file_path)
melbourne_data.columns
#+END_SRC

#+RESULTS:
: Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG',
:        'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car',
:        'Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude',
:        'Longtitude', 'Regionname', 'Propertycount'],
:       dtype='object')

#+BEGIN_SRC jupyter-python :session python
melbourne_data = melbourne_data.dropna(axis=0)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python :session python
y = melbourne_data.Price
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python :session python
melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python :session python
X = melbourne_data[melbourne_features]
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python :session python
X.describe()
#+END_SRC

#+RESULTS:
:              Rooms     Bathroom      Landsize    Lattitude   Longtitude
: count  6196.000000  6196.000000   6196.000000  6196.000000  6196.000000
: mean      2.931407     1.576340    471.006940   -37.807904   144.990201
: std       0.971079     0.711362    897.449881     0.075850     0.099165
: min       1.000000     1.000000      0.000000   -38.164920   144.542370
: 25%       2.000000     1.000000    152.000000   -37.855438   144.926198
: 50%       3.000000     1.000000    373.000000   -37.802250   144.995800
: 75%       4.000000     2.000000    628.000000   -37.758200   145.052700
: max       8.000000     8.000000  37000.000000   -37.457090   145.526350

#+BEGIN_SRC jupyter-python :session python
X.head()
#+END_SRC

#+RESULTS:
:    Rooms  Bathroom  Landsize  Lattitude  Longtitude
: 1      2       1.0     156.0   -37.8079    144.9934
: 2      3       2.0     134.0   -37.8093    144.9944
: 4      4       1.0     120.0   -37.8072    144.9941
: 6      3       2.0     245.0   -37.8024    144.9993
: 7      2       1.0     256.0   -37.8060    144.9954

#+BEGIN_SRC jupyter-python :session python
from sklearn.tree import DecisionTreeRegressor

# Define model. Specify a number for random_state to ensure same results each run
melbourne_model = DecisionTreeRegressor(random_state=1)

# Fit model
melbourne_model.fit(X, y)
#+END_SRC

#+RESULTS:
: DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=None,
:                       max_features=None, max_leaf_nodes=None,
:                       min_impurity_decrease=0.0, min_impurity_split=None,
:                       min_samples_leaf=1, min_samples_split=2,
:                       min_weight_fraction_leaf=0.0, presort='deprecated',
:                       random_state=1, splitter='best')

#+BEGIN_SRC jupyter-python :session python
print('Making predictions for the following 5 houses:')
print(X.head())
print('The predictions are')
print(melbourne_model.predict(X.head()))
#+END_SRC

#+RESULTS:
: Making predictions for the following 5 houses:
:    Rooms  Bathroom  Landsize  Lattitude  Longtitude
: 1      2       1.0     156.0   -37.8079    144.9934
: 2      3       2.0     134.0   -37.8093    144.9944
: 4      4       1.0     120.0   -37.8072    144.9941
: 6      3       2.0     245.0   -37.8024    144.9993
: 7      2       1.0     256.0   -37.8060    144.9954
: The predictions are
: [1035000. 1465000. 1600000. 1876000. 1636000.]

#+BEGIN_SRC jupyter-python :session python
import pandas as pd

# Load data
melbourne_file_path = '../../data/input/melb_data.csv'
melbourne_data = pd.read_csv(melbourne_file_path)
# Filter rows with missing price values
filtered_melbourne_data = melbourne_data.dropna(axis=0)
# Choose target and features
y = filtered_melbourne_data.Price
melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'BuildingArea', 'YearBuilt', 'Lattitude', 'Longtitude']
X = filtered_melbourne_data[melbourne_features]

from sklearn.tree import DecisionTreeRegressor

# Define model
melbourne_model = DecisionTreeRegressor()
# Fit model
melbourne_model.fit(X, y)
#+END_SRC

#+RESULTS:
: DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=None,
:                       max_features=None, max_leaf_nodes=None,
:                       min_impurity_decrease=0.0, min_impurity_split=None,
:                       min_samples_leaf=1, min_samples_split=2,
:                       min_weight_fraction_leaf=0.0, presort='deprecated',
:                       random_state=None, splitter='best')

#+BEGIN_SRC jupyter-python :session python
from sklearn.metrics import mean_absolute_error

predicted_home_prices = melbourne_model.predict(X)
mean_absolute_error(y, predicted_home_prices)
#+END_SRC

#+RESULTS:
: 434.71594577146544

#+BEGIN_SRC jupyter-python :session python
from sklearn.model_selection import train_test_split

train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=0)
melbourne_model = DecisionTreeRegressor(random_state=1)
melbourne_model.fit(train_X, train_y)

val_predictions = melbourne_model.predict(val_X)
print(mean_absolute_error(val_y, val_predictions))
#+END_SRC

#+RESULTS:
: 262494.3027759845
